import { GoogleGenAI, Modality } from "@google/genai";
import type { ImageData } from "../types";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  // In a real app, you might want to show a message to the user or disable functionality.
  // For this example, we'll throw an error during development if the key is missing.
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

export const generateHugImage = async (
  personOneImage: ImageData,
  personTwoImage: ImageData,
  style: string,
  background: string,
  aspectRatio: string
): Promise<string> => {
  const model = "gemini-2.5-flash-image";

  const basePrompt = `Given these two images, each of a different person, create a new image where the two people are warmly hugging each other. Both figures should be the main focus, interacting naturally. Ensure the final image is heartwarming and cohesive.`;

  let stylePrompt = '';
  switch (style.toLowerCase()) {
    case 'painterly':
      stylePrompt = `Create the final image in a beautiful, artistic painterly style with visible, expressive brush strokes.`;
      break;
    case 'cartoonish':
      stylePrompt = `Render the final image in a charming and heartwarming cartoon or animated style, similar to a high-quality animated film still.`;
      break;
    case 'photorealistic':
    default:
      stylePrompt = `Create a photorealistic image.`;
      break;
  }

  let backgroundPrompt = '';
    switch (background.toLowerCase()) {
    case 'bokeh':
      backgroundPrompt = `The background should be a beautiful, out-of-focus bokeh of warm city lights at night, creating a magical atmosphere. The lighting on the figures should be soft and match the background.`;
      break;
    case 'soft gradient':
        backgroundPrompt = `The background should be a subtle, soft gradient of pastel colors (like a gentle sunrise or sunset), with natural, gentle lighting on the figures.`;
        break;
    case 'blurred nature':
        backgroundPrompt = `The background should be a serene, blurred nature scene, like a sunlit forest or a peaceful park, with soft, natural lighting on the figures.`;
        break;
    case 'starry night':
        backgroundPrompt = `The background should be a breathtaking, clear starry night sky, filled with twinkling stars and perhaps a hint of galaxy colors. The lighting on the figures should be magical and celestial, as if lit by the stars themselves.`;
        break;
    case 'cozy fireplace':
        backgroundPrompt = `The background should be a warm and cozy indoor setting featuring a gently crackling fireplace. The lighting on the figures should be soft and warm, cast from the fire's glow, creating an intimate and comfortable atmosphere.`;
        break;
    case 'smooth white':
    default:
      backgroundPrompt = `The background should be a completely smooth, soft white, with natural, gentle lighting that illuminates both figures.`;
      break;
  }
  
  let aspectRatioPrompt = '';
  switch (aspectRatio.toLowerCase()) {
    case 'landscape':
      aspectRatioPrompt = `The final image must have a landscape aspect ratio (16:9).`;
      break;
    case 'portrait':
      aspectRatioPrompt = `The final image must have a portrait aspect ratio (9:16).`;
      break;
    case 'square':
    default:
      aspectRatioPrompt = `The final image must have a square aspect ratio (1:1).`;
      break;
  }

  const finalPrompt = `${stylePrompt} ${basePrompt} ${backgroundPrompt} ${aspectRatioPrompt}`;

  try {
    const response = await ai.models.generateContent({
      model: model,
      contents: {
        parts: [
          {
            inlineData: {
              data: personOneImage.base64,
              mimeType: personOneImage.mimeType,
            },
          },
          {
            inlineData: {
              data: personTwoImage.base64,
              mimeType: personTwoImage.mimeType,
            },
          },
          {
            text: finalPrompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        return part.inlineData.data;
      }
    }

    throw new Error("No image was generated by the API.");
  } catch (error) {
    console.error("Error generating image with Gemini API:", error);
    throw new Error("Failed to generate the image. Please check the console for details and try again.");
  }
};